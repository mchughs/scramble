{"version":3,"sources":["scrambler/ui.cljs"],"mappings":";;;;;AAMA,AAAA,AAAeA;AAEf,AAAA,AAAOC,AAAWC,AAAMC,AAAOC;AAA/B,AACE,AAAiBA;;AACjB,AAAMC,AAAG,AAAS,AAAA,AAAiBC;AAC7BC,AAAG,AAAS,AAAA,AAAiBD;AADnC,AAEE,AAAAE,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAA,AAAA,AAE8ChB;AAF9CiB,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAIyCd,AAAOE;AAJhDa,AAAA,AAAAC,AAAAH,AAAAC;AAAAG,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAAF,AAAAJ,AAAAK;AAAAE,AAAA,AAAAR,AAAAO,AAEY2D;AAFZrE,AAAAA;AAAA,AAAA,AAAAY,AAAAZ,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAAD,AAOMyD,AAAOlF;AAPbW,AAAAA;AAAA,AAAA,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAH;AAAAI,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAJ,AAAAE;AAAAtB,AAAAA;AAAA,AAAA,AAAA,AAAAwB;AAAA,AAAAC,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAA2B,AAAA,AAAAb,AAMMyD,AAAOjF;AANbU,AAAAA;AAAA,AAAA,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAA6B,AAAA,AAAAX,AAAA;AAAAY,AAAA,AAAAC,AAAAF;AAAA7B,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAAd;;AAAAc;;AAAA,AAAA,AAAA,AAAAF;AAAA,AAAAG,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAkC,AAAA,AAAAnC,AAAA;AAAAc,AAAA,AAAAsB,AAAAD,AAAA;AAAAE,AAAA,AAAAD,AAAAD,AAAA;AAAAG,AAAA,AAAA,AAAAD,AAKQiC;AALRtE,AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAAzB;;AAAAyB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAxC,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAA0C,AAAA,AAAAC,AAAAC,AAAA1B;AAAAlB,AAAAA;AAAA,AAAA,AAAA,AAAA6C,AAAA7C;AAAA,AAAA,AAAA6C,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA5C,AAAA;AAAA,AAAA6C,AAAA,AAAA9C,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA8C;AAAA,AAAAC,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAhD;AAAA,AAAA,AAAAgD,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA/C,AAAA;AAAA,AAAAgD,AAAA,AAAAjD,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAkD,AAAAlD,AAAAiD;;AAAA,AAAA,AAAAhD,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAmD,AAAAnD;AAAA,AAAA,AAAAmD,AAAA,AAAAjC;;AAAA,AAAAiC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlD,AAAA;AAAA,AAAAmD,AAAA,AAAApD,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAqD,AAAArD;AAAA,AAAA,AAAAqD,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAtD;;AAAA,AAAA,AAAAwD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA1D,AAAAC;AAAA,AAAA,AAAA,AAAA0D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA7D;AAAA,AAAA,AAAA6D,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAA9D,AAAA;AAAA,AAAA+D,AAAA/D;AAAA,AAAA,AAAA+D,AAAA,AAAA,AAAAC,AAAA,AAAAhE,AAAA;;AAAA+D;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAxD;;;;AAAAwD;;;;;AAAAxD;;;;;AAAAA;;;;;;;;;AAAAiE,AAAA,AAAAC,AAAA,AAAApE;AAAA,AAAA,AAAAoE,AAAAC,AAAA,AAAAxE;;AAAAuE;;AAAA,AAAA,AAAAE,AAAAH;;;AAAAtE;;AASJ,AAAA,AAAM6E;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA;AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAA;;AAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAI;;;;AAAA,AAAAK,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAA,AAAmBnF,AAAO,AAAA,AAAC8F;AAA3B,AAAAF,AAAA,AAAAT,AAAA,AAAA,AAAAA,AAAA,AACmBpF,AAAO,AAAA,AAAC+F;AAD3B,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMqB,AAACE,AAAQjG,AAAUC,AAAMC;AAN9C,AAOsB,AAAI,AAAA,AAACiF,AAAOjF;;AACR,AAAA,AAACiF,AAAOlF;AARlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA6BI,AAAA,AAAAiG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOjG,AAEC,AAAA,AAAAiG,AAACC,AAAQlG,AAEjB,AAAA,AAAAiG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAOhG,AACsBA;AAlCjC,AAAA;AAAA6F","names":["scrambler.ui/port","scrambler.ui/on-submit","error","result","e","s1","js/document","s2","c__27006__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27007__auto__","switch__26961__auto__","state_28823","state_val_28824","statearr-28825","inst_28782","inst_28783","inst_28784","inst_28785","inst_28786","cljs.core/PersistentHashMap","inst_28787","inst_28788","inst_28789","cljs.core.async.impl.ioc-helpers/take!","statearr-28826","inst_28813","inst_28819","statearr-28827","statearr-28828","inst_28791","inst_28796","inst_28797","inst_28798","inst_28799","cljs.core/PROTOCOL_SENTINEL","inst_28800","statearr-28829","statearr-28830","inst_28817","statearr-28831","inst_28793","inst_28794","cljs.core/not","statearr-28832","statearr-28833","statearr-28834","inst_28812","cljs.core.get","inst_28814","inst_28815","statearr-28835","statearr-28836","statearr-28837","inst_28809","cljs.core.apply","cljs.core/hash-map","statearr-28838","inst_28807","statearr-28839","statearr-28840","inst_28821","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28841","inst_28804","statearr-28842","statearr-28843","state-machine__26962__auto__","ret-value__26963__auto__","result__26964__auto__","cljs.core/keyword-identical?","ex__26965__auto__","e28844","statearr-28845","cljs.core/seq","statearr-28846","cljs.core/first","state__27008__auto__","statearr-28847","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","cljs.core._EQ_","cljs.core/reset!","scrambler.ui/component","with-let28848","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__27273__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init28849","res__27274__auto__","reagent.core.atom","cljs.core.partial","cljs.core/deref","cljs.core.pr_str"],"sourcesContent":["(ns scrambler.ui\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [reagent.core :as reagent :refer [atom]]))\n\n(def ^:private port 4000) ;; Also established in project.clj\n\n(defn- on-submit [error result e]\n  (.preventDefault e)\n  (let [s1 (.-value (.getElementById js/document \"scrabble-hand\"))\n        s2 (.-value (.getElementById js/document \"target\"))]\n    (go\n     (let [{:keys [body status]}\n           (<! (http/get (str \"http://localhost:\" port \"/scramble\")\n                         {:with-credentials? false\n                          :query-params {:s1 s1 :s2 s2}}))]\n       (if (= 200 status)\n         (reset! result body)\n         (reset! error  body))))))\n\n(defn component []\n  (reagent/with-let [result (atom nil)\n                     error  (atom nil)]\n    [:div\n     [:h1 \"Will it scramble?\"]\n     [:h3 \"You may only use characters from a-z, lowercase.\"]\n     [:form {:accept-charset \"ISO-8859-1\"\n             :onSubmit (partial on-submit error result)\n             :onChange #(do (reset! result nil)\n                            (reset! error nil))}\n      [:label {:for \"scrabble-hand\"}\n       \"Your Scrabble Tiles:\"]\n      [:br]\n      [:input {:type \"text\"\n               :pattern \"[a-z]*\"\n               :id \"scrabble-hand\"\n               :name \"scrabble-hand\"\n               :defaultValue \"rekqodlw\"}]\n      [:br]\n      [:label {:for \"target\"}\n       \"Target Word:\"]\n      [:br]\n      [:input {:type \"text\"\n               :pattern \"[a-z]*\"\n               :id \"target\"\n               :name \"target\"\n               :defaultValue \"world\"}]\n      [:br]\n      [:input {:type \"submit\"\n               :value \"Submit\"}]\n      (when @error\n        [:div \"Oops, the following problem occured with our server: \"\n              (pr-str @error) \".\"\n              \" Check that the server is running!\"])\n      (when @result\n        [:div \"The answer is... \" @result \"!\"])]]))\n"]}